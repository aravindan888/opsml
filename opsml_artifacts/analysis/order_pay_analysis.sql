--ALTER SESSION SET JDBC_QUERY_RESULT_FORMAT='JSON'
--WITH PREDS AS (
---- EM SHOULD END UP BEING 1 FOR DROP TIME
--SELECT
--  NG_ORDER_ID AS NG_ORDER_ID,
--  NULL AS CHECKOUT_TIME,
--  NULL AS DELIVERY_TIME,
--  NULL AS PICK_TIME,
--  DROP_OFF_TIME/60 AS DROP_TIME,
--  NULL AS DRIVE_TIME,
--  NULL AS WAIT_TIME
--FROM DATA_SCIENCE.OPSML_FP_ORDERS_TIME_ACTUALS
--WHERE DROP_OFF_EVAL_FLG = 1
--  AND BUNDLE_TYPE = 'TARP'
--),

WITH NEW_PREDICTIONS AS (
SELECT
  TO_VARCHAR(NG_ORDER_ID)          NG_ORDER_ID,
  TO_NUMBER(A.CHECKOUT_TIME,10,4)  PRED_CHECKOUT_TIME,
  TO_NUMBER(A.DELIVERY_TIME,10,4)  PRED_DELIVERY_MIN,
  TO_NUMBER(A.PICK_TIME,10,4)      PRED_PICK_TIME,
  TO_NUMBER(A.DROP_TIME,10,4)      PRED_DROP_TIME,
  TO_NUMBER(A.DRIVE_TIME,10,4)     PRED_DRIVE_TIME,
  TO_NUMBER(A.WAIT_TIME,10,4)      PRED_WAIT_TIME
FROM DATA_SCIENCE.{prediction_table} AS A
  --FROM PREDS AS A
),

ACTUAL_DATA AS (
  
SELECT
A.NG_ORDER_ID,
A.METRO, 
C.METRO_ID,
C.NBR_ORDERS,
C.SHOPPER_EXPERIENCE,
A.BUNDLE_TYPE,
C.BASE_PAY,
C.GOAL_HOURLY_WAGE,
  
-- CURRENT FP PREDS
C.PRE_CLAIM_EST_CHECKOUT_MINS                                                               AS FP_CHECKOUT_TIME,
C.PRE_CLAIM_EST_SHOP_MINS                                                                   AS FP_PICK_TIME,
C.PRE_CLAIM_EST_DELIVERY_MINS                                                               AS FP_DELIVERY_TIME,
C.PRE_CLAIM_EST_WAIT_MINS                                                                   AS FP_WAIT_TIME,
C.PRE_CLAIM_EST_DROP_OFF_MINS                                                               AS FP_DROP_TIME,
C.PRE_CLAIM_EST_SERVICE_MINS                                                                AS FP_SERVICE_TIME, 
C.PRE_CLAIM_EST_OVERALL_MINS                                                                AS FP_OVERALL_TIME, 
--C.PRE_CLAIM_EST_DRIVE_MINS                                                                AS FP_DRIVE_TIME,

-- PREDS (COALESCE WITH FP IF MISSING)
COALESCE(PRED_CHECKOUT_TIME,C.PRE_CLAIM_EST_CHECKOUT_MINS)                                   AS PRED_CHECKOUT_TIME,
COALESCE(PRED_DELIVERY_MIN,C.PRE_CLAIM_EST_DELIVERY_MINS)                                    AS PRED_DELIVERY_TIME,
COALESCE(PRED_PICK_TIME,C.PRE_CLAIM_EST_SHOPPING_MINS)                                       AS PRED_PICK_TIME,
COALESCE(PRED_DROP_TIME,C.PRE_CLAIM_EST_DROP_OFF_MINS)                                       AS PRED_DROP_TIME,
COALESCE(PRED_DRIVE_TIME,C.PRE_CLAIM_EST_DRIVE_MINS)                                         AS PRED_DRIVE_TIME,
COALESCE(PRED_WAIT_TIME,C.PRE_CLAIM_EST_WAIT_MINS)                                           AS PRED_WAIT_TIME,
  
-- ACTUALS
A.PICK_TIME/60                                                                                AS ACTUAL_PICK_TIME,
A.CHECKOUT_TIME/60                                                                            AS ACTUAL_CHECKOUT_TIME,
A.DELIVERY_WAIT_TIME/60                                                                       AS ACTUAL_WAIT_TIME,
A.DELIVERY_TIME/60                                                                            AS ACTUAL_DELIVERY_TIME,
A.DROP_OFF_TIME/60                                                                            AS ACTUAL_DROP_OFF_TIME,
ACTUAL_DROP_OFF_TIME + COALESCE(ACTUAL_WAIT_TIME,0)                                           AS ACTUAL_SERVICE_TIME, 
COALESCE(ACTUAL_PICK_TIME, 0) + COALESCE(ACTUAL_CHECKOUT_TIME, 0) + ACTUAL_DELIVERY_TIME      AS ACTUAL_OVERALL_TIME,
  
-- SHOP TIME
PRED_CHECKOUT_TIME + PRED_PICK_TIME                                                         AS PRED_SHOP_TIME,
  
-- SERVICE TIME
PRED_WAIT_TIME + PRED_DROP_TIME                                                             AS PRED_SERVICE_TIME,

COALESCE(C.PER_ORDER_FLOOR,6)                                                                  AS PER_ORDER_FLOOR

FROM DATA_SCIENCE.OPSML_FP_ORDERS_TIME_ACTUALS AS A
INNER JOIN (SELECT * FROM DATA_SCIENCE.OPSML_ORDER_BUNDLE_EVAL_DATA WHERE BUNDLE = 0) AS C
  ON A.NG_ORDER_ID = C.NG_ORDER_ID
INNER JOIN NEW_PREDICTIONS AS B
   ON A.NG_ORDER_ID = B.NG_ORDER_ID
WHERE 1=1
   AND (A.SHOPPER_EXPERIENCE = 'shop_deliver' AND A.PRE_CLAIM_EST_PICK_MINS IS NOT NULL)
   OR (A.SHOPPER_EXPERIENCE = 'delivery' AND A.PRE_CLAIM_EST_DELIVERY_MINS IS NOT NULL)
),

PICK_OUTLIER AS (

  SELECT 
    METRO_ID,
    SHOPPER_EXPERIENCE,
    NBR_ORDERS,
    ACTUAL_PICK_TIME,
    PRED_PICK_TIME,
    APPROX_PERCENTILE(ACTUAL_PICK_TIME, 0.25) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q25,
    APPROX_PERCENTILE(ACTUAL_PICK_TIME, 0.75) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q75,
    Q75 - Q25 AS IQR,
    CASE 
      WHEN ACTUAL_PICK_TIME < (Q25 - (1.5 *IQR)) THEN 1
      WHEN ACTUAL_PICK_TIME > (Q75 + (1.5 *IQR)) THEN 1
    ELSE 0 END AS EVAL_OUTLIER
  FROM ACTUAL_DATA AS A

),

CHECKOUT_OUTLIER AS (

  SELECT 
    METRO_ID,
    SHOPPER_EXPERIENCE,
    NBR_ORDERS,
    ACTUAL_CHECKOUT_TIME,
    PRED_CHECKOUT_TIME,
    APPROX_PERCENTILE(ACTUAL_CHECKOUT_TIME, 0.25) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q25,
    APPROX_PERCENTILE(ACTUAL_CHECKOUT_TIME, 0.75) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q75,
    Q75 - Q25 AS IQR,
    CASE 
      WHEN ACTUAL_CHECKOUT_TIME < (Q25 - (1.5 *IQR)) THEN 1
      WHEN ACTUAL_CHECKOUT_TIME > (Q75 + (1.5 *IQR)) THEN 1
    ELSE 0 END AS EVAL_OUTLIER
  FROM ACTUAL_DATA AS A

),

DELIVERY_OUTLIER AS (

  SELECT 
    METRO_ID,
    SHOPPER_EXPERIENCE,
    NBR_ORDERS,
    ACTUAL_DELIVERY_TIME,
    PRED_DELIVERY_TIME,
    APPROX_PERCENTILE(ACTUAL_DELIVERY_TIME, 0.25) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q25,
    APPROX_PERCENTILE(ACTUAL_DELIVERY_TIME, 0.75) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q75,
    Q75 - Q25 AS IQR,
    CASE 
      WHEN ACTUAL_DELIVERY_TIME < (Q25 - (1.5 *IQR)) THEN 1
      WHEN ACTUAL_DELIVERY_TIME > (Q75 + (1.5 *IQR)) THEN 1
    ELSE 0 END AS EVAL_OUTLIER
  FROM ACTUAL_DATA AS A

),

DROP_OFF_OUTLIER AS (

  SELECT 
    METRO_ID,
    SHOPPER_EXPERIENCE,
    NBR_ORDERS,
    ACTUAL_DROP_OFF_TIME,
    PRED_DROP_TIME,
    APPROX_PERCENTILE(ACTUAL_DROP_OFF_TIME, 0.25) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q25,
    APPROX_PERCENTILE(ACTUAL_DROP_OFF_TIME, 0.75) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q75,
    Q75 - Q25 AS IQR,
    CASE 
      WHEN ACTUAL_DROP_OFF_TIME < (Q25 - (1.5 *IQR)) THEN 1
      WHEN ACTUAL_DROP_OFF_TIME > (Q75 + (1.5 *IQR)) THEN 1
    ELSE 0 END AS EVAL_OUTLIER
  FROM ACTUAL_DATA AS A

),

WAIT_OUTLIER AS (

  SELECT 
    METRO_ID,
    SHOPPER_EXPERIENCE,
    NBR_ORDERS,
    ACTUAL_WAIT_TIME,
    PRED_WAIT_TIME,
    APPROX_PERCENTILE(ACTUAL_WAIT_TIME, 0.25) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q25,
    APPROX_PERCENTILE(ACTUAL_WAIT_TIME, 0.75) OVER(PARTITION BY A.METRO_ID, A.BUNDLE_TYPE, A.SHOPPER_EXPERIENCE) Q75,
    Q75 - Q25 AS IQR,
    CASE 
      WHEN ACTUAL_WAIT_TIME < (Q25 - (1.5 *IQR)) THEN 1
      WHEN ACTUAL_WAIT_TIME > (Q75 + (1.5 *IQR)) THEN 1
    ELSE 0 END AS EVAL_OUTLIER
  FROM ACTUAL_DATA AS A

),

SEM_PICK AS (
SELECT 
  METRO_ID,
  SHOPPER_EXPERIENCE,
  SUM(ACTUAL_PICK_TIME)                                                                     AS METRO_PICK_TIME,
  SUM(PRED_PICK_TIME)                                                                       AS METRO_PRED_PICK_TIME,
  ROUND(1+DIV0((METRO_PICK_TIME - METRO_PRED_PICK_TIME),ROUND(METRO_PRED_PICK_TIME,2)),5)   AS PICK_NEW_EM
FROM PICK_OUTLIER
WHERE 1=1
  {outlier_flg}
  --AND EVAL_OUTLIER = 0
GROUP BY
  METRO_ID,
  SHOPPER_EXPERIENCE
), 

SEM_CHECKOUT AS (
SELECT 
  METRO_ID,
  SHOPPER_EXPERIENCE,
  SUM(ACTUAL_CHECKOUT_TIME)                                                                             AS METRO_CHECKOUT_TIME,
  SUM(PRED_CHECKOUT_TIME)                                                                               AS METRO_PRED_CHECKOUT_TIME,
  ROUND(1+DIV0((METRO_CHECKOUT_TIME - METRO_PRED_CHECKOUT_TIME),ROUND( METRO_PRED_CHECKOUT_TIME,2)),5)  AS CHECKOUT_NEW_EM
FROM CHECKOUT_OUTLIER
WHERE 1=1
  {outlier_flg}
  --AND EVAL_OUTLIER = 0
GROUP BY
  METRO_ID,
  SHOPPER_EXPERIENCE
), 

SEM_DELIVERY AS (
SELECT 
  METRO_ID,
  SHOPPER_EXPERIENCE,
  SUM(ACTUAL_DELIVERY_TIME)                                                                             AS METRO_DELIVERY_TIME,
  SUM(PRED_DELIVERY_TIME)                                                                               AS METRO_PRED_DELIVERY_TIME,
  ROUND(1+DIV0((METRO_DELIVERY_TIME - METRO_PRED_DELIVERY_TIME),ROUND( METRO_PRED_DELIVERY_TIME,2)),5)  AS DELIVERY_NEW_EM
FROM DELIVERY_OUTLIER
WHERE 1=1
  {outlier_flg}
  --AND EVAL_OUTLIER = 0
GROUP BY
  METRO_ID,
  SHOPPER_EXPERIENCE
),

SEM_DROP_OFF AS (
SELECT 
  METRO_ID,
  SHOPPER_EXPERIENCE,
  SUM(ACTUAL_DROP_OFF_TIME)                                                                             AS METRO_DROP_OFF_TIME,
  SUM(PRED_DROP_TIME)                                                                               AS METRO_PRED_DROP_OFF_TIME,
  ROUND(1+DIV0((METRO_DROP_OFF_TIME - METRO_PRED_DROP_OFF_TIME),ROUND(METRO_PRED_DROP_OFF_TIME,2)),5)  AS DROP_OFF_NEW_EM
FROM DROP_OFF_OUTLIER
WHERE 1=1
  {outlier_flg}
  --AND EVAL_OUTLIER = 0
GROUP BY
  METRO_ID,
  SHOPPER_EXPERIENCE
),

SEM_WAIT AS (
SELECT 
  METRO_ID,
  SHOPPER_EXPERIENCE,
  SUM(ACTUAL_WAIT_TIME)                                                                             AS METRO_WAIT_TIME,
  SUM(PRED_WAIT_TIME)                                                                               AS METRO_PRED_WAIT_TIME,
  ROUND(1+DIV0((METRO_WAIT_TIME - METRO_PRED_WAIT_TIME),ROUND( METRO_PRED_WAIT_TIME,2)),5)          AS WAIT_NEW_EM
FROM WAIT_OUTLIER
WHERE 1=1
  {outlier_flg}
  --AND EVAL_OUTLIER = 0
GROUP BY
  METRO_ID,
  SHOPPER_EXPERIENCE
),

BIAS_CORRECTED_BASE_PAY AS (

SELECT 
  
A.NG_ORDER_ID,
A.METRO, 
A.METRO_ID,
A.PER_ORDER_FLOOR,
A.NBR_ORDERS,
A.SHOPPER_EXPERIENCE,
A.BUNDLE_TYPE,
A.BASE_PAY,
A.GOAL_HOURLY_WAGE,
A.PRED_WAIT_TIME,
A.PRED_DROP_TIME,
A.PRED_PICK_TIME,
A.PRED_CHECKOUT_TIME,
A.PRED_DELIVERY_TIME,
A.FP_CHECKOUT_TIME,
A.FP_PICK_TIME,
A.FP_DELIVERY_TIME,
A.FP_WAIT_TIME,
A.FP_DROP_TIME,
A.FP_OVERALL_TIME, 
A.ACTUAL_WAIT_TIME,                                      
A.ACTUAL_DROP_OFF_TIME,
A.ACTUAL_PICK_TIME,
A.ACTUAL_CHECKOUT_TIME,
A.ACTUAL_DELIVERY_TIME,
A.ACTUAL_OVERALL_TIME,
  
-- BUNDLE EMS (NEW)
IFNULL(B.PICK_NEW_EM, 1)                                                        AS PICK_SEM_NEW,
IFNULL(C.CHECKOUT_NEW_EM, 1)                                                    AS CHECKOUT_SEM_NEW,
IFNULL(D.DELIVERY_NEW_EM, 1)                                                    AS DELIVERY_SEM_NEW,
CASE WHEN BUNDLE_TYPE ='TLMD' THEN 1 ELSE IFNULL(E.DROP_OFF_NEW_EM, 1) END      AS DROP_OFF_SEM_NEW,
CASE WHEN BUNDLE_TYPE ='TLMD' THEN 1 ELSE IFNULL(F.WAIT_NEW_EM, 1) END          AS WAIT_SEM_NEW,
        

  ---- NEW PREDICTIONS FOR EACH FULFILLMENT LEG
CASE 
  WHEN PRED_WAIT_TIME = FP_WAIT_TIME THEN FP_WAIT_TIME
  ELSE ((PRED_WAIT_TIME * WAIT_SEM_NEW))  END                                   AS PRED_WAIT_TIME_ADJ, 
PRED_WAIT_TIME_ADJ/60 * GOAL_HOURLY_WAGE                                        AS ESTIMATED_WAIT_PAY_NEW,
  
CASE 
  WHEN PRED_DROP_TIME = FP_DROP_TIME THEN FP_DROP_TIME
  ELSE ((PRED_DROP_TIME * DROP_OFF_SEM_NEW))  END                               AS PRED_DROP_OFF_TIME_ADJ, 
PRED_DROP_OFF_TIME_ADJ/60 * GOAL_HOURLY_WAGE                                    AS ESTIMATED_DROP_OFF_PAY_NEW,
  
CASE 
  WHEN PRED_PICK_TIME = FP_PICK_TIME THEN FP_PICK_TIME
  ELSE ((PRED_PICK_TIME * PICK_SEM_NEW))   END                                  AS PRED_PICK_TIME_ADJ, 
PRED_PICK_TIME_ADJ/60 * GOAL_HOURLY_WAGE                                        AS ESTIMATED_PICK_PAY_NEW,
  
CASE
  WHEN PRED_CHECKOUT_TIME = FP_CHECKOUT_TIME THEN FP_CHECKOUT_TIME
  ELSE ((PRED_CHECKOUT_TIME * CHECKOUT_SEM_NEW)) END                            AS PRED_CHECKOUT_TIME_ADJ,
PRED_CHECKOUT_TIME_ADJ/60 * GOAL_HOURLY_WAGE                                    AS ESTIMATED_CHECKOUT_PAY_NEW,
  
CASE
  WHEN PRED_DELIVERY_TIME = FP_DELIVERY_TIME THEN FP_DELIVERY_TIME
  ELSE ((PRED_DELIVERY_TIME * DELIVERY_SEM_NEW)) END                            AS PRED_DELIVERY_TIME_ADJ,
PRED_DELIVERY_TIME_ADJ/60 * GOAL_HOURLY_WAGE                                    AS ESTIMATED_DELIVERY_PAY_NEW ,

-- TEMP LOGIC UNTIL WE HAVE DRIVE TIME
-- EV DEFAULTS TO 12.5 FOR ALL TARP BOOS
CASE 
    WHEN BUNDLE_TYPE IN ('TARP') THEN 
      FP_OVERALL_TIME - 12.5 + PRED_WAIT_TIME_ADJ + PRED_DROP_OFF_TIME_ADJ
    ELSE PRED_PICK_TIME_ADJ + PRED_CHECKOUT_TIME_ADJ + PRED_DELIVERY_TIME_ADJ
    END                                                                         AS PRED_OVERALL_TIME,
PRED_OVERALL_TIME/60 * GOAL_HOURLY_WAGE                                         AS ESTIMATED_OVERALL_PAY_NEW,
---- FLIGHT PLAN CURRENT PREDICTIONS FOR EACH FULFILLMENT LEG
((FP_WAIT_TIME)/60) * GOAL_HOURLY_WAGE                                          AS ESTIMATED_WAIT_PAY_FP,
((FP_DROP_TIME)/60) * GOAL_HOURLY_WAGE                                          AS ESTIMATED_DROP_OFF_PAY_FP,
((FP_PICK_TIME)/60) * GOAL_HOURLY_WAGE                                          AS ESTIMATED_PICK_PAY_FP,
((FP_CHECKOUT_TIME)/60) * GOAL_HOURLY_WAGE                                      AS ESTIMATED_CHECKOUT_PAY_FP,
((FP_DELIVERY_TIME)/60) * GOAL_HOURLY_WAGE                                      AS ESTIMATED_DELIVERY_PAY_FP,
((FP_OVERALL_TIME)/60) * GOAL_HOURLY_WAGE                                       AS ESTIMATED_OVERALL_PAY_FP,
  
---- ACTUAL CURRENT PREDICTIONS FOR EACH FULFILLMENT LEG
((ACTUAL_WAIT_TIME)/60) * GOAL_HOURLY_WAGE                                      AS ACTUAL_WAIT_PAY,
((ACTUAL_DROP_OFF_TIME)/60) * GOAL_HOURLY_WAGE                                  AS ACTUAL_DROP_OFF_PAY,
((ACTUAL_PICK_TIME)/60) * GOAL_HOURLY_WAGE                                      AS ACTUAL_PICK_PAY,
((ACTUAL_CHECKOUT_TIME)/60) * GOAL_HOURLY_WAGE                                  AS ACTUAL_CHECKOUT_PAY,
((ACTUAL_DELIVERY_TIME)/60) * GOAL_HOURLY_WAGE                                  AS ACTUAL_DELIVERY_PAY,
((ACTUAL_OVERALL_TIME)/60) * GOAL_HOURLY_WAGE                                   AS ACTUAL_OVERALL_PAY,
  
-- PER ORDER FLOORS
IFF(ESTIMATED_OVERALL_PAY_NEW < PER_ORDER_FLOOR, PER_ORDER_FLOOR, ESTIMATED_OVERALL_PAY_NEW) AS ESTIMATED_OVERALL_PAY_FLOOR_NEW,
IFF(ESTIMATED_OVERALL_PAY_FP < PER_ORDER_FLOOR, PER_ORDER_FLOOR, ESTIMATED_OVERALL_PAY_FP)   AS ESTIMATED_OVERALL_PAY_FLOOR_OLD
  
  
FROM ACTUAL_DATA AS A 
LEFT JOIN SEM_PICK AS B
  ON A.METRO_ID = B.METRO_ID
  AND A.SHOPPER_EXPERIENCE = B.SHOPPER_EXPERIENCE
LEFT JOIN SEM_CHECKOUT AS C
  ON A.METRO_ID = C.METRO_ID
  AND A.SHOPPER_EXPERIENCE = C.SHOPPER_EXPERIENCE
LEFT JOIN SEM_DELIVERY AS D
  ON A.METRO_ID = D.METRO_ID
  AND A.SHOPPER_EXPERIENCE = D.SHOPPER_EXPERIENCE
LEFT JOIN SEM_DROP_OFF AS E
  ON A.METRO_ID = E.METRO_ID
  AND A.SHOPPER_EXPERIENCE = E.SHOPPER_EXPERIENCE
LEFT JOIN SEM_WAIT AS F
  ON A.METRO_ID = F.METRO_ID
  AND A.SHOPPER_EXPERIENCE = F.SHOPPER_EXPERIENCE  
 )

SELECT 
  {metro}
  SUM(NBR_ORDERS) AS NBR_ORDERS_WORKED,
  TO_NUMBER(MEDIAN(GOAL_HOURLY_WAGE),10,2)    AS MEDIAN_GOAL_PPH,
  
-- WORKED TIMES
  SUM(ACTUAL_OVERALL_TIME)                    AS WORKED_TIME,
  SUM(FP_OVERALL_TIME)                        AS PRED_WORKED_TIME_OLD,
  SUM(PRED_OVERALL_TIME)                      AS PRED_WORKED_TIME_NEW,
  SUM(ESTIMATED_OVERALL_PAY_FLOOR_OLD)        AS ESTIMATED_PAY_OLD,
  SUM(ESTIMATED_OVERALL_PAY_FLOOR_NEW)        AS ESTIMATED_PAY_NEW,
  ESTIMATED_PAY_NEW - ESTIMATED_PAY_OLD       AS OVERALL_PAY_DIFF,

  --DPH
  TO_NUMBER(NBR_ORDERS_WORKED/(PRED_WORKED_TIME_NEW/60),10,2) AS NEW_DPH,
  TO_NUMBER(NBR_ORDERS_WORKED/(PRED_WORKED_TIME_OLD/60),10,2) AS OLD_DPH,
  (NEW_DPH - OLD_DPH)/OLD_DPH                                 as DPH_DIFF,

  -- BASE PPH
  TO_NUMBER(ESTIMATED_PAY_OLD / (WORKED_TIME/60),10,2)    AS AVG_BASE_PPH_OLD,
  TO_NUMBER(ESTIMATED_PAY_NEW / (WORKED_TIME/60),10,2)    AS AVG_BASE_PPH_NEW,
  AVG_BASE_PPH_OLD - MEDIAN_GOAL_PPH                      AS PPH_DIFF_OLD_MINUS_GOAL,
  AVG_BASE_PPH_NEW - MEDIAN_GOAL_PPH                      AS PPH_DIFF_NEW_MINUS_GOAL,

  -- PAY PER order
  ESTIMATED_PAY_OLD/NBR_ORDERS_WORKED                      AS PPB_OLD,
  ESTIMATED_PAY_NEW/NBR_ORDERS_WORKED                      AS PPB_NEW,
  PPB_NEW - PPB_OLD                                        AS PPB_DIFF,

  -- NEW PAY THAT IS WITJIN 25 CENTS OF HOURLY WAGE
  TO_NUMBER((COUNT_IF(ABS(DIV0(ESTIMATED_OVERALL_PAY_FLOOR_NEW, (ACTUAL_OVERALL_TIME/60)) - GOAL_HOURLY_WAGE) < 0.25)/NBR_ORDERS_WORKED)*100,10,2) AS PCT_ORDERS_WITH_PPH_NEW_MINUS_GOAL_WITHIN_25CENTS,

  -- BUNDLES THAT WERE FLOORED
  TO_NUMBER(COUNT_IF(ESTIMATED_OVERALL_PAY_FLOOR_OLD <= PER_ORDER_FLOOR) / NBR_ORDERS_WORKED * 100,10,2) as PCT_LIVE_ORDERS_WITH_BASE_PAY_FLOORED, 
  TO_NUMBER(COUNT_IF(ESTIMATED_OVERALL_PAY_FLOOR_NEW <= PER_ORDER_FLOOR) / NBR_ORDERS_WORKED * 100,10,2) as PCT_NEW_ORDERS_WITH_BASE_PAY_FLOORED,
  
  SUM(ACTUAL_PICK_TIME)                             AS PICK_TIME_ACTUAL,
  SUM(PRED_PICK_TIME_ADJ)                           AS PRED_PICK_TIME_NEW,
  SUM(FP_PICK_TIME)                                 AS PRED_PICK_TIME_OLD,
  PRED_PICK_TIME_NEW - PRED_PICK_TIME_OLD           AS PICK_TIME_DIFF,
  TO_NUMBER(SUM(ACTUAL_PICK_PAY),10,3)              AS PICK_PAY_ACTUAL,
  TO_NUMBER(SUM(ESTIMATED_PICK_PAY_NEW),10,3)       AS PICK_PAY_NEW,
  TO_NUMBER(SUM(ESTIMATED_PICK_PAY_FP),10,3)        AS PICK_PAY_FP,
  PICK_PAY_NEW - PICK_PAY_FP                        AS PICK_PAY_DIFF,
                        
  SUM(ACTUAL_CHECKOUT_TIME)                         AS CHECKOUT_TIME_ACTUAL,
  SUM(PRED_CHECKOUT_TIME_ADJ)                       AS PRED_CHECKOUT_TIME_NEW,
  SUM(FP_CHECKOUT_TIME)                             AS PRED_CHECKOUT_TIME_OLD,
  PRED_CHECKOUT_TIME_NEW - PRED_CHECKOUT_TIME_OLD   AS CHECKOUT_TIME_DIFF,
  TO_NUMBER(SUM(ACTUAL_CHECKOUT_PAY),10,3)          AS CHECKOUT_PAY_ACTUAL,
  TO_NUMBER(SUM(ESTIMATED_CHECKOUT_PAY_NEW),10,3)   AS CHECKOUT_PAY_NEW,
  TO_NUMBER(SUM(ESTIMATED_CHECKOUT_PAY_FP),10,3)    AS CHECKOUT_PAY_FP,
  CHECKOUT_PAY_NEW - CHECKOUT_PAY_FP                AS CHECKOUT_PAY_DIFF,
         
  -- delivery      
  SUM(ACTUAL_DELIVERY_TIME)                         AS DELIVERY_TIME_ACTUAL,
  SUM(PRED_DELIVERY_TIME_ADJ)                       AS PRED_DELIVERY_TIME_NEW,
  SUM(FP_DELIVERY_TIME)                             AS PRED_DELIVERY_TIME_OLD,
  PRED_DELIVERY_TIME_NEW - PRED_DELIVERY_TIME_OLD   AS DELIVERY_TIME_DIFF,
  TO_NUMBER(SUM(ACTUAL_DELIVERY_PAY),10,3)          AS DELIVERY_PAY_ACTUAL,
  TO_NUMBER(SUM(ESTIMATED_DELIVERY_PAY_NEW),10,3)   AS DELIVERY_PAY_NEW,
  TO_NUMBER(SUM(ESTIMATED_DELIVERY_PAY_FP),10,3)    AS DELIVERY_PAY_FP,
  DELIVERY_PAY_NEW - DELIVERY_PAY_FP                AS DELIVERY_PAY_DIFF,
  
  -- wait
  SUM(ACTUAL_WAIT_TIME)                             AS WAIT_TIME,
  SUM(PRED_WAIT_TIME_ADJ)                           AS PRED_WAIT_TIME_NEW,
  SUM(FP_WAIT_TIME)                                 AS PRED_WAIT_TIME_OLD,
  PRED_WAIT_TIME_NEW - PRED_WAIT_TIME_OLD           AS WAIT_TIME_DIFF,
  TO_NUMBER(SUM(ACTUAL_WAIT_PAY),10,3)              AS WAIT_PAY_ACTUAL,
  TO_NUMBER(SUM(ESTIMATED_WAIT_PAY_NEW),10,3)       AS WAIT_PAY_NEW,
  TO_NUMBER(SUM(ESTIMATED_WAIT_PAY_FP),10,3)        AS WAIT_PAY_FP,
  WAIT_PAY_NEW - WAIT_PAY_FP                        AS WAIT_PAY_DIFF,
  
  -- drop
  SUM(ACTUAL_DROP_OFF_TIME)                         AS DROP_OFF_TIME_ACTUAL,
  SUM(PRED_DROP_OFF_TIME_ADJ)                       AS PRED_DROP_OFF_TIME_NEW,
  SUM(FP_DROP_TIME)                                 AS PRED_DROP_OFF_TIME_OLD,
  PRED_DROP_OFF_TIME_NEW - PRED_DROP_OFF_TIME_OLD   AS DROP_OFF_TIME_DIFF,
  TO_NUMBER(SUM(ACTUAL_DROP_OFF_PAY),10,3)          AS DROP_PAY_ACTUAL,
  TO_NUMBER(SUM(ESTIMATED_DROP_OFF_PAY_NEW),10,3)   AS DROP_PAY_NEW,
  TO_NUMBER(SUM(ESTIMATED_DROP_OFF_PAY_FP),10,3)    AS DROP_PAY_FP,
  DROP_PAY_NEW - DROP_PAY_FP                        AS DROP_OFF_PAY_DIFF,
  
  --sems
  TO_NUMBER(MEDIAN(PICK_SEM_NEW),10,2)              AS PICK_EM,
  TO_NUMBER(MEDIAN(CHECKOUT_SEM_NEW),10,2)          AS CHECKOUT_EM,
  TO_NUMBER(MEDIAN(DELIVERY_SEM_NEW),10,2)          AS DELIVERY_EM,
  TO_NUMBER(MEDIAN(WAIT_SEM_NEW),10,2)              AS WAIT_EM,
  TO_NUMBER(MEDIAN(DROP_OFF_SEM_NEW),10,2)          AS DROP_EM


FROM BIAS_CORRECTED_BASE_PAY AS A
--GROUP BY METRO
{metro_group}
ORDER BY NBR_ORDERS_WORKED DESC